
The synchronized keyword is used for exclusive access to a section of code.
To make a method synchronized, simply add the synchronized keyword into the declaration. 
No two invocations of synchronized methods on the same object can interleave with each other.
Synchronized statements must specify the object that provides the intrinsic lock. 
When synchronized(this) is used, it avoids synchronizing invocations of other objects' methods.
wait() tells the calling thread to give up the monitor and go to sleep until some other thread enters the same monitor and calls notify( ).
notify() wakes up the first thread that called wait() on the same object.

See http://stackoverflow.com/questions/442564/avoid-synchronizedthis-in-java

The synchronized keyword is very limited in one area: when exiting a synchronized block, all threads that are waiting for that lock must 
be unblocked, but only one of those threads gets to take the lock; all the others see that the lock is taken and go back to the blocked state. 
That's not just a lot of wasted processing cycles: often the context switch to unblock a thread also involves paging memory off the disk, 
and that's very, very, expensive.

Enter ReentrantReadWriteLock: this is an alternative that allows any number of readers to share a lock, but only a single writer. 
When a thread attempts to acquire the write lock, the thread blocks until all reader threads have released the read lock. 
The cost of managing the ReentrantReadWriteLock's state is somewhat higher than synchronized, but has the huge advantage of letting 
multiple reader threads operate simultaneously. 
That means much, much higher throughput. 

ReentrantReadWriteLock is smart about only waking the right thread or threads when either the read lock or the write lock is released. 
You don't see the same thrash you would with synchronized: if a thread is waiting for the write lock, and another thread releases it, 
ReentrantReadWriteLock will (likely) just unblock the one waiting thread. 

See http://java.dzone.com/articles/synchronized-considered


In these simple examples
ThreadAExample1 is unsynchronized
ThreadAExample2 is synchronized

Some notes on notify and notify All  

As a programmer, you must not rely on any particular selection algorithm or treatment of priorities, at least if you are trying to write a 
Java program that is platform independent. For example, because you don't know what order threads in the wait set will be chosen for resurrection
by the notify command, you should use notify (as opposed to notify all) only when you are absolutely certain there will only be one thread suspended
in the wait set. If there is a chance more than one thread will be suspended in the wait set at any one time, you should probably use notify all. 
Otherwise, on some Java virtual machine implementations a particular thread may be stuck in the wait set for a very long time. 
If a notify always selects the most recent arrival from the wait set and the wait set always contains multiple threads, some threads that 
have been waiting the longest may never be resurrected. 