Java.util.Concurrent.CyclicBarrier is a synchronisation aid that allows a set of threads to wait for each other to reach a common barrier point. 
This means that all the threads reaching a specific point (called as barrier point) will have to wait for other threads to reach the same point. 
As soon as all the threads have reached the barrier point, all threads to are released to continue.

The barrier is called cyclic because it can be re-used after the waiting threads are released and that is where it is different than CountdownLatch. 
We can reuse CyclicBarrier by calling reset() method which resets the barrier to its initial state.

CountDownLatch is good for one time event like application/module start-up time and CyclicBarrier can be used to in case of recurrent event 
e.g. concurrently (re-)calculating each time when the input data changed.

http://examples.javacodegeeks.com/core-java/util/concurrent/cyclicbarrier/java-util-concurrent-cyclicbarrier-example/